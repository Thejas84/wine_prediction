# -*- coding: utf-8 -*-
"""wine pre of datascienceproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12174YjTsZ4TLyPaKuSh4fWoZkmu0Ox-D
"""

import pandas as pd

import numpy as np

df=pd.read_csv(r"https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/WhiteWineQuality.csv",sep=';')

df.head(5)

df.tail()

df.describe()

df.info()

df.columns

df['quality'].value_counts()

df.groupby('quality').mean()

y = df['quality']

y.shape

y

x= df[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
       'pH', 'sulphates', 'alcohol']]

x=df.drop('quality',axis=1)

x.shape

x

"""#get x variable standardization"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

X=ss.fit_transform(x)

x

"""# get train_test_split

"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2323,stratify=y)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.svm import SVC

svc=SVC()

svc.fit(x_train,y_train)

y_pred=svc.predict(x_test)

y_pred.shape

y_pred

""" from  sklearn.metrics import confusion_matrix, classification_report"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""# two classes are created for wine quality

"""

y= df["quality"].apply(lambda y_value: 1 if y_value >= 6 else 0)

y.value_counts()

"""# get train test split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2323,stratify=y)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""# get model train"""

from sklearn.svm import SVC

svc=SVC()

svc.fit(x_train,y_train)

"""#get model prediction"""

y_pred=svc.predict(x_test)

y_pred.shape

y_pred

"""#get model evalution"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""#get future prediction
# extract a randomrow using a sample function
"""

df_new=df.sample(1)

df_new

X_new = df_new.drop(['quality'],axis=1)

X_new=ss.fit_transform(X_new)

y_pred_new=svc.predict(X_new)

y_pred_new